-- mySql 
CREATE TABLE VENDOR_DETAILS (
    VENDOR_ID INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    VENDOR_NAME VARCHAR(255),
    PRODUCT_NAME VARCHAR(255),
    STREET_NAME VARCHAR(255),
    CITY VARCHAR(255),
    STATE CHAR(2),
    ZIP_CODE VARCHAR(10),
    SELLER_FIRST_NAME VARCHAR(255),
    SELLER_LAST_NAME VARCHAR(255),
    SELLER_PHONE VARCHAR(20),
    SELLER_EMAIL VARCHAR(255),
    SELLER_URL VARCHAR(255),
    SELLER_NAME_CHANGE TINYINT(1),
    ARTICLE_FINDING TINYINT(1),
    ARTICLE_URL VARCHAR(255),
    PRODUCT_CATEGORY VARCHAR(255),
    ANNUAL_SALES DECIMAL(19,4),
    VERIFIED_COMPANY TINYINT(1),
    PRICE_DIFFERANCE DECIMAL(10,2),
    PRODUCT_PRICE DECIMAL(19,4),
    DIFFERENT_ADDRESS TINYINT(1)
);


--MS Sql version
CREATE TABLE VENDOR_DETAILS (
    VENDOR_ID INT IDENTITY(1,1) PRIMARY KEY,
    VENDOR_NAME VARCHAR(255),
    PRODUCT_NAME VARCHAR(255),
    STREET_NAME VARCHAR(255),
    CITY VARCHAR(255),
    STATE CHAR(2),
    ZIP_CODE VARCHAR(10),
    SELLER_FIRST_NAME VARCHAR(255),
    SELLER_LAST_NAME VARCHAR(255),
    SELLER_PHONE VARCHAR(20),
    SELLER_EMAIL VARCHAR(255),
    SELLER_URL VARCHAR(255),
    SELLER_NAME_CHANGE BIT,
    ARTICLE_FINDING BIT,
    ARTICLE_URL VARCHAR(255),
    PRODUCT_CATEGORY VARCHAR(255),
    ANNUAL_SALES DECIMAL(19,4), -- Adjusted from MONEY; DECIMAL(19,4) is often used for monetary values
    VERIFIED_COMPANY BIT,
    PRICE_DIFFERANCE DECIMAL(10,2),
    PRODUCT_PRICE DECIMAL(19,4), -- Adjusted from MONEY
    DIFFERENT_ADDRESS BIT -- Assuming DIFFERNT_ADDRESS was a typo
);

-- create sequense for VENDOR_ID
CREATE SEQUENCE VENDOR_ID_SEQ
    START WITH 1
    INCREMENT BY 1
    NO CYCLE;




-- mySql vendor score
SELECT VENDOR_NAME,
       COUNT(*) AS RATING_SCORE,
       CASE
           WHEN COUNT(*) >= 80 THEN 'TOP'
           WHEN COUNT(*) BETWEEN 60 AND 79 THEN 'HIGH'
           WHEN COUNT(*) BETWEEN 40 AND 59 THEN 'MODERATE'
           WHEN COUNT(*) <= 39 THEN 'LOW'
       END AS score_category
FROM VENDOR_DETAILS
GROUP BY VENDOR_NAME
ORDER BY RATING_SCORE DESC;

-- msSql vendor score
SELECT VENDOR_NAME,
       COUNT(*) AS RATING_SCORE,
       CASE
           WHEN COUNT(*) >= 80 THEN 'TOP'
           WHEN COUNT(*) BETWEEN 60 AND 79 THEN 'HIGH'
           WHEN COUNT(*) BETWEEN 40 AND 59 THEN 'MODERATE'
           WHEN COUNT(*) <= 39 THEN 'LOW'
       END AS score_category
FROM VENDOR_DETAILS
GROUP BY VENDOR_NAME
ORDER BY RATING_SCORE DESC;

-- mySql products score
SELECT PRODUCT_NAME,
       COUNT(*) AS VENDOR_SCORE
FROM VENDOR_DETAILS
GROUP BY PRODUCT_NAME
ORDER BY RATING_SCORE DESC;

--MS Sql products score
SELECT PRODUCT_NAME,
       COUNT(*) AS VENDOR_SCORE
FROM VENDOR_DETAILS
GROUP BY PRODUCT_NAME
ORDER BY RATING_SCORE DESC;

-- mySql verified company scoreing
SELECT VERIFIED_COMPANY 
-- Assuming VERIFIED_COMPANY is a boolean column if true add 10 to score
-- if false add 0 to score
-- if null add 0 to score

--MS Sql verified company scoreing


SELECT *
FROM VENDOR_DETAILS
GROUP BY VENDOR_NAME
ORDER BY VERIFIED_COMPANY_SCORE DESC;

SELECT VENDOR_NAME,
       COUNT(*) AS RATING_SCORE,
       CASE
           WHEN COUNT(*) >= 80 THEN 'TOP'
           WHEN COUNT(*) BETWEEN 60 AND 79 THEN 'HIGH'
           WHEN COUNT(*) BETWEEN 40 AND 59 THEN 'MODERATE'
           WHEN COUNT(*) <= 39 THEN 'LOW'
       END AS score_category
FROM VENDOR_DETAILS
GROUP BY VENDOR_NAME
ORDER BY RATING_SCORE DESC;

SELECT 
    VENDOR_NAME,
    COUNT(DISTINCT PRODUCT_NAME) AS Product_Diversity_Score,
    (CASE   WHEN VERIFIED_COMPANY = 0 THEN 10 ELSE 0 END) AS Verified_Company_Score,
    COUNT(DISTINCT PRODUCT_NAME) + (CASE  WHEN VERIFIED_COMPANY = 0 THEN 10 ELSE 0  END) AS Total_Score
FROM VENDOR_DETAILS
GROUP BY VENDOR_NAME, VERIFIED_COMPANY;





SELECT
    VD.VENDOR_ID,
    VD.VENDOR_NAME,
    VD.PRODUCT_NAME,
    VD.STREET_NAME,
    VD.CITY,
    VD.STATE,
    VD.ZIP_CODE,
    VD.SELLER_FIRST_NAME,
    VD.SELLER_LAST_NAME,
    VD.SELLER_PHONE,
    VD.SELLER_EMAIL,
    VD.SELLER_URL,
    VD.SELLER_NAME_CHANGE,
    VD.ARTICLE_FINDING,
    VD.ARTICLE_URL,
    VD.PRODUCT_GATEGORY,
    VD.ANNUAL_SALES,
    VD.VERIFIED_COMPANY,
    VD.PRICE_DIFFERANCE,
    VD.PRODUCT_PRICE,
    VD.DIFFRENT_ADDRESS,
    COALESCE(R.RATING_SCORE,
    0) AS RATING_SCORE,
    R.SCORE_CATEGORY,
    COALESCE(PD.PRODUCT_DIVERSITY_SCORE,
    0) AS PRODUCT_DIVERSITY_SCORE,
    COALESCE(PD.VERIFIED_COMPANY_SCORE,
    0) AS VERIFIED_COMPANY_SCORE,
    COALESCE(PD.TOTAL_SCORE,
    0) AS TOTAL_SCORE
FROM
    VENDOR_DETAILS VD
    LEFT JOIN (
        SELECT
            VENDOR_NAME,
            COUNT(*) AS RATING_SCORE,
            CASE
                WHEN COUNT(*) >= 60 THEN
                    'TOP'
                WHEN COUNT(*) BETWEEN 50 AND 59 THEN
                    'HIGH'
                WHEN COUNT(*) BETWEEN 40 AND 49 THEN
                    'MODERATE'
                WHEN COUNT(*) <= 39 THEN
                    'LOW'
            END AS SCORE_CATEGORY
        FROM
            VENDOR_DETAILS
        GROUP BY
            VENDOR_NAME
    ) AS R
    ON VD.VENDOR_NAME = R.VENDOR_NAME
    LEFT JOIN (
        SELECT
            VENDOR_NAME,
            COUNT(DISTINCT PRODUCT_NAME) AS PRODUCT_DIVERSITY_SCORE,
            MAX(
                CASE
                    WHEN VERIFIED_COMPANY = 0 THEN
                        10
                    ELSE
                        0
                END) AS VERIFIED_COMPANY_SCORE,
            COUNT(DISTINCT PRODUCT_NAME) + MAX(
                CASE
                    WHEN VERIFIED_COMPANY = 0 THEN
                        10
                    ELSE
                        0
                END) AS TOTAL_SCORE
        FROM
            VENDOR_DETAILS
        GROUP BY
            VENDOR_NAME
    ) AS PD
    ON VD.VENDOR_NAME = PD.VENDOR_NAME
WHERE
    R.PRODUCT_NAME = 'Ove Glove'
ORDER BY
    COALESCE(R.RATING_SCORE, 0) DESC